{"version":3,"sources":["api/index.js","components/Feature.js","components/Title.js","components/Loading.js","components/Search.js","components/Preview.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","results","console","error","Feature","featuredResult","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","id","Fragment","toLowerCase","map","person","idx","log","key","prefix","name","length","image","src","baseimageurl","alt","photosHTML","Title","PureComponent","Loading","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setCentury","setClassification","setQueryString","useEffect","Promise","all","then","centuryResults","classificationResults","catch","onSubmit","htmlFor","type","placeholder","onChange","target","item","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","disabled","prev","next","record","index","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.240d6ae1.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=cdddd6bb-a8d7-42e4-9789-a17d599859a6';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React  from 'react';\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\nconst Searchable = (props) => {\n  const {\n      searchTerm,\n      searchValue,\n      setIsLoading,\n      setSearchResults\n  } = props;\n\n\n  return <span className=\"content\">\n  <a href=\"#\" onClick={async (event) => {\n      event.preventDefault();\n      setIsLoading(true);\n\n    try {\n        const results = await fetchQueryResultsFromTermAndValue(searchTerm, searchValue);\n        setSearchResults(results);\n    } catch (error) {\n        console.error(error);\n    } finally {\n        setIsLoading(false)\n    }\n\n  }}>{searchValue}</a>\n  </span>\n}\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n * \n * <main id=\"feature\"></main>\n * \n * And like this when one is:\n * \n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n * \n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style, \n * technique, medium, dimensions, people, department, division, contact, creditline\n * \n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n * \n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n * \n * This component should be exported as default.\n */\n\nconst Feature = (props) => {\n\n    const {\n        featuredResult,\n        setIsLoading,\n        setSearchResults,\n    } = props;\n\n    const {\n        title, \n        dated, \n        images, \n        primaryimageurl, \n        description, \n        culture, \n        style, \n        technique, \n        medium, \n        dimensions, \n        people, \n        department, \n        division, \n        contact, \n        creditline\n    } = featuredResult || {};\n\n    \nfunction photosHTML(images, primaryimageurl) {\n    if(images) {\n    if(images.length > 0) {\n      return images.map(image => <img src={image.baseimageurl} alt='' />);\n    } else if (primaryimageurl) {\n      return [<img src={primaryimageurl} alt='' />]\n    } else {\n      return [];\n        }\n    } else return '';\n}\n\n    if(featuredResult === null) {\n        return <main id=\"feature\"></main>\n    } else {\n        return <main id=\"feature\">\n           <div className=\"object-feature\">\n             <header>\n               <h3>{title ? title : null}</h3>\n              <h4>{dated ? dated : null}</h4>\n            </header>\n             <section className=\"facts\">\n                 \n            { description ?\n            <React.Fragment>\n               <span className=\"title\">Description</span>\n               <span className=\"content\">{description}</span>\n            </React.Fragment> : null }\n\n            { culture ?\n            <React.Fragment>\n               <span className=\"title\">Culture</span>\n               <span className=\"content\"><Searchable setIsLoading={setIsLoading} setSearchResults={setSearchResults} searchTerm={'culture'} searchValue={culture}></Searchable></span>\n            </React.Fragment> : null }\n\n            { style ?\n            <React.Fragment>\n               <span className=\"title\">Style</span>\n               <span className=\"content\">{style}</span>\n               </React.Fragment> : null }\n\n            { technique ?\n              <React.Fragment>\n              <span className=\"title\">Technique</span>\n              <span className=\"content\"><Searchable setIsLoading={setIsLoading} setSearchResults={setSearchResults} searchTerm={'technique'} searchValue={technique}></Searchable></span>\n              </React.Fragment> : null }\n\n            { medium ?\n              <React.Fragment> \n              <span className=\"title\">Medium</span>\n              <span className=\"content\"><Searchable setIsLoading={setIsLoading} setSearchResults={setSearchResults} searchTerm={'medium'} searchValue={medium.toLowerCase()}></Searchable></span>\n              </React.Fragment> : null }\n            \n            { dimensions ?\n            <React.Fragment>\n              <span className=\"title\">Dimensions</span>\n              <span className=\"content\">{dimensions}</span>\n            </React.Fragment> : null }\n\n            { people ?\n            <React.Fragment>\n              <span className=\"title\">People</span>\n              {people.map((person, idx) => {\n                console.log(people);\n                  return <span className=\"content\" key={idx}>{person.prefix}<Searchable setIsLoading={setIsLoading} setSearchResults={setSearchResults} searchTerm={'person'} searchValue={person.name}></Searchable></span>}\n              )}\n            </React.Fragment> : null }\n\n            { department ?\n            <React.Fragment>\n              <span className=\"title\">Department</span>\n              <span className=\"content\">{department}</span>\n            </React.Fragment> : null }\n\n            { division ?\n            <React.Fragment>\n              <span className=\"title\">Divison</span>\n              <span className=\"content\">{division}</span>\n            </React.Fragment> : null }\n\n            { contact ?\n            <React.Fragment>\n              <span className=\"title\">Contact</span>\n              <span className=\"content\">{contact}</span>\n            </React.Fragment> : null }\n\n            { creditline ?\n            <React.Fragment>\n              <span className=\"title\">Credit Line</span>\n              <span className=\"content\">{creditline}</span>\n            </React.Fragment> : null }\n            \n             </section>\n            \n            { images ?\n            <React.Fragment>\n             <section className=\"photos\">\n               {photosHTML(images, primaryimageurl)}\n             </section>\n             </React.Fragment> : null }\n\n          </div>\n          \n        </main>\n    }\n}\n\nexport default Feature;","import React, { PureComponent } from 'react';\n\n \nclass Title extends PureComponent {\n  render() {\n  return <div id=\"title\">\n    <h1>\n      The Art Collector\n    </h1>\n    <h5>\n      Search the Harvard Art Museums' Private Collections\n    </h5>\n  </div>\n  }\n}\n\nexport default Title;\n \n","import React, { PureComponent } from 'react';\n\n\n class Loading extends PureComponent {\n     render() {\n    return <div id=\"loading\">\n    <h2 className=\"message\">Searching...</h2>\n    </div>\n    }\n}\n\nexport default Loading;\n","import React, { useEffect, useState } from 'react';\n\n/**\n * Don't touch these imports!\n */\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults\n} from '../api';\n\nconst Search = (props) => {\n  const {\n    setIsLoading,\n    setSearchResults }\n    = props;\n \n\n   const [centuryList, setCenturyList] = useState([]); \n   const [classificationList, setClassificationList] = useState([]);\n   const [century, setCentury] = useState('any');\n   const [classification, setClassification] = useState('any');\n   const [queryString, setQueryString] = useState('');\n\n\n  useEffect(() => {\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()])\n    .then(([centuryResults, classificationResults]) => {\n      console.log(centuryResults, classificationResults)\n      setCenturyList(centuryResults);\n      setClassificationList(classificationResults);\n    })\n    .catch(error => {\n      console.error(error)\n    })\n\n  }, []);\n\n\n  return <form id=\"search\" onSubmit={async (event) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResults({ century, classification, queryString });\n      setSearchResults(results);\n    }\n    catch (error) {\n      console.error(error)\n    } finally {\n      setIsLoading(false)\n    }\n\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={(event) => setQueryString(event.target.value)}/>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={event => setClassification(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {classificationList.map((item, idx) => {\n            return <option key={idx} value={item.name}>{item.name}</option>\n          })}\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={event => setCentury(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {centuryList.map((item, idx) => {\n            return <option key={idx} value={item.name}>{item.name}</option>\n          })}\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n}\n\nexport default Search;","import React from 'react';\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n\n  const {\n    setSearchResults, \n    setFeaturedResult, \n    setIsLoading } = props;\n\n  const {\n    info,\n    records\n  } = props.searchResults;\n\n\n  /**\n   * Don't touch this function, it's good to go.\n   * \n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return <aside id=\"preview\">\n    <header className=\"pagination\">\n      {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n      <button \n        disabled={!info.prev ? true : false} \n        className=\"previous\"\n        onClick={() => fetchPage(info.prev)}>Previous</button>\n      {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n      <button\n        disabled={!info.next ? true : false}\n        className=\"next\"\n        onClick={() => fetchPage(info.next)}>Next</button>\n    </header>\n    <section className=\"results\">\n      {\n        // Here we should map over the records, and render something like this for each one:\n        records.map((record, index) => {\n          return <div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              event.preventDefault();\n              setFeaturedResult(record);}}>\n\n                <img src={record.primaryimageurl ? record.primaryimageurl : null} alt={record.description ? record.description : ''} />\n                <h3> {record.title ? record.title : 'MISSING INFO'}</h3>\n\n          </div> })\n      }\n    </section>\n  </aside>\n}\n\nexport default Preview;","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\n// These imports won't work until you fix ./components/index.js\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';\n\nconst App = () => {\n \n  const [searchResults, setSearchResults] = useState( {info: {}, records: []} );\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n\n  return <div className=\"app\">\n \n    <Title />\n   \n    <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n   \n    <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResult={setFeaturedResult}/>\n    \n    <Feature featuredResult={featuredResult} setIsLoading={setIsLoading}  setSearchResults={setSearchResults}/>\n \n    {isLoading ? <Loading/> : null} {/* use a ternary and render null if isLoading is false */}\n  </div>\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('app'),\n)\n"],"sourceRoot":""}